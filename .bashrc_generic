#!/bin/bash
#
# Generic bashrc to be sourced from main .bashrc
#


#
# Enable bash completion
#
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

#
# stty
#
# -ixon -ixoff: to remove XON/OFF to release Ctrl-s and Ctrl-q
# -ctlecho    : to remove echo of Ctrl-c (^C)
# globstar    : to use ** for recursive pattern
#
if [ -t 0 ]; then # If not running interactively, don't do anything
    stty -ixon -ixoff -ctlecho
fi
shopt -s globstar


# recommended from tmux-continium for a better bash-history
HISTCONTROL=ignoreboth

#
# Using vim to read man pages (vman command)
# Use vman command insted of normal man
#
vman()
{
    vim -c "Man $*" -c "silent only" -c "nmap q :q!<cr>"
}

#
# Add paths of the home sdk
#
os_filename="/etc/os-release"
if [ -f $os_filename ]; then
    source $os_filename
    os_codename=$ID-$VERSION_ID
    export PATH=$HOME/usr-$os_codename/bin:$PATH
    export GOPATH=$HOME/usr-$os_codename
else
    echo "$os_filename not found"
fi

export EDITOR='vim -X'

# Alias
alias ll='ls -lh'
alias la='ls -lha'

alias eduroam='sudo wpa_supplicant -Dwext -iwlp2s0 -c /home/agil/.cat_installer/cat_installer.conf'

#
# Colored Prompt Command
#
# Git - from http://blog.deadlypenguin.com/blog/2013/10/24/adding-git-status-to-bash/
# Venv
# return code
# colors based on userid and docker or singularity
#

export ENABLE_PROMPT_GIT=1   # set it to 0 in the terminal to disable the git prompt
export ENABLE_PROMPT_ERR=1   # set it to 0 in the terminal to disable the return code error prompt
export ENABLE_PROMPT_VENV=1  # set it to 0 in the terminal to disable the venv prompt
export ENABLE_PROMPT_SLURM=1 # set it to 0 in the terminal to disable the slurm prompt

#
# Define some colors first: Capitals denote bold
#
red='\e[0;31m'
RED='\e[1;31m'
green='\e[0;32m'
GREEN='\e[1;32m'
yellow='\e[0;33m'
YELLOW='\e[1;33m'
blue='\e[0;34m'
BLUE='\e[1;34m'
magenta='\e[0;35m'
MAGENTA='\e[1;35m'
cyan='\e[0;36m'
CYAN='\e[1;36m'
NC='\e[0m'              # No Color

# Taken from http://www.opinionatedprogrammer.com/2011/01/colorful-bash-prompt-reflecting-git-status/
function _git_prompt()
{
  if [[ "$ENABLE_PROMPT_GIT" == 1 ]]; then
      local git_status="`git status -unormal 2>&1`"
      if ! [[ "$git_status" =~ ot\ a\ git\ repo ]]; then
        if [[ "$git_status" =~ nothing\ to\ commit ]]; then
          local ansi=$GREEN
        elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
          local ansi=$YELLOW
        else
          local ansi=$RED
        fi
        if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
          branch=${BASH_REMATCH[1]}
          #test "$branch" != master || branch=' '
        else
          # Detached HEAD.  (branch=HEAD is a faster alternative.)
          branch="(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null ||
          echo HEAD`)"
        fi
        echo -n '[\['"$ansi"'\]'"$branch"'\[\e[0m\]] '
      fi
  fi
}

function _virtualenv_prompt()
{
  if [[ "$ENABLE_PROMPT_VENV" == 1 ]]; then
    if [[ $VIRTUAL_ENV ]] ; then
        BASE_VENV=`basename $VIRTUAL_ENV`
        echo -ne "(\[$CYAN\]$BASE_VENV\[$NC\]) "
    fi
  fi
}

function _slurm_prompt()
{
    if [[ "$ENABLE_PROMPT_SLURM" == 1 ]]; then
        if [[ $SLURM_SETUP_VER ]] ; then
            echo -ne "{\[$CYAN\]$SLURM_SETUP_VER\[$NC\]} "
        fi
    fi
}


function report_errcode()
{
  if [[ "$ENABLE_PROMPT_ERR" == 1 ]]; then
     RET_CODE=$?
     COLOR=$NC
     if [[ $RET_CODE -ne 0 ]] ; then
         COLOR=$RED
     fi
     echo -ne "[\[$COLOR\]$RET_CODE\[$NC\]] "
 fi
}

function report_location()
{
    if [ -z "$DOCKER" ] && [ -z "$SINGULARITY_NAME" ]; then
        if [ "$UID" == 0 ]; then
            echo -ne "\[$RED\]\u@\h\[$NC\]:\[$BLUE\]\w\[$NC\]"
        else
            echo -ne "\[$GREEN\]\u@\h\[$NC\]:\[$BLUE\]\w\[$NC\]"
        fi
    else
        echo -ne "\[$YELLOW\]\u@\h\[$NC\]:\[$MAGENTA\]\w\[$NC\]"
    fi

}

# export PS2="\[$NC\]> "
export _PS1=">> "
export  PS1=$_PS1
export PROMPT_COMMAND='_errcode=$(report_errcode);export PS1="${_errcode}$(_virtualenv_prompt)$(_slurm_prompt)$(_git_prompt)$(report_location)${_PS1}";unset _errcode;'

#
# Rclone helpers
#
rclone-pull()
{
    rclone_filter="";
    local_path=`realpath "./${1}"`
    rclone_path="${local_path}"
    rclone_remote=`echo ${PWD/#$HOME/} | cut -d "/" -f2`;
    rclone_path=`echo ${rclone_path/#$HOME\/$rclone_remote/}`;

    if [ -f "${local_path}" ]; then
        is_file=1
    else
        if [ -d "${local_path}" ]; then
            is_file=0
        else
#             echo "Getting remote size..."
#             is_file=`rclone size "${rclone_remote}:${rclone_path}" | grep objects | sed 's/Total objects: //'`
            rclone rmdir "${rclone_remote}:${rclone_path}" --dry-run
            is_file=$?
        fi
    fi

    if [ "${is_file}" == 1 ]; then
        local_path=`dirname "${local_path}"`
    else
        rclone_filter=${HOME}/${rclone_remote}/.rclone.filter
        if [ -e ${rclone_filter} ]; then
            rclone_filter=" --filter-from ${rclone_filter}"
        else
            rclone_filter=""
        fi
    fi

    cmd=`echo rclone sync \"${rclone_remote}:${rclone_path}\" \"${local_path}\" --drive-skip-gdocs --track-renames ${rclone_filter} ${@:2}`;
    echo $cmd;

    rclone           sync  "${rclone_remote}:${rclone_path}"   "${local_path}"  --drive-skip-gdocs --track-renames ${rclone_filter} ${@:2} --dry-run ;
    echo "Overwriting LOCAL files. Sure?";
    read sure;
    if [ "$sure" = "y"  ]; then
        rclone       sync "${rclone_remote}:${rclone_path}"    "${local_path}"  --drive-skip-gdocs --track-renames ${rclone_filter} ${@:2} -v;
    else
        echo "Aborted";
    fi;
}

rclone-push()
{
    rclone_filter="";
    local_path=`realpath "./${1}"`
    rclone_remote=`echo ${PWD/#$HOME/} | cut -d "/" -f2`;

    if [ -f "${local_path}" ]; then
        rclone_path=`dirname "${local_path}"`
    else
        rclone_path="${local_path}"
        rclone_filter=${HOME}/${rclone_remote}/.rclone.filter
        if [ -e ${rclone_filter} ]; then
            rclone_filter=" --filter-from ${rclone_filter}"
        else
            rclone_filter=""
        fi
    fi
    rclone_path=`echo ${rclone_path/#$HOME\/$rclone_remote/}/`;

    cmd=`echo rclone sync \"${local_path}\" \"${rclone_remote}:${rclone_path}\" --drive-skip-gdocs --track-renames ${rclone_filter} ${@:2}`;
    echo $cmd;
    rclone           sync  "${local_path}"   "${rclone_remote}:${rclone_path}"  --drive-skip-gdocs --track-renames ${rclone_filter} ${@:2} --dry-run;
    echo "Overwriting REMOTE files. Sure?";
    read sure;
    if [ "$sure" = "y"  ]; then
        rclone       sync  "${local_path}"   "${rclone_remote}:${rclone_path}"  --drive-skip-gdocs --track-renames ${rclone_filter} ${@:2} -v;
    else
        echo "Aborted";
    fi;
}

rclone-status()
{
    rclone_filter="";
    local_path=`realpath "./${1}"`
    rclone_remote=`echo ${PWD/#$HOME/} | cut -d "/" -f2`;

    if [ -f "${local_path}" ]; then
        rclone_path=`dirname "${local_path}"`
    else
        rclone_path="${local_path}"
        rclone_filter=${HOME}/${rclone_remote}/.rclone.filter
        if [ -e ${rclone_filter} ]; then
            rclone_filter=" --filter-from ${rclone_filter}"
        else
            rclone_filter=""
        fi
    fi
    rclone_path=`echo ${rclone_path/#$HOME\/$rclone_remote/}/`;

    cmd=`echo rclone check \"${local_path}\" \"${rclone_remote}:${rclone_path}\" --ignore-size --drive-skip-gdocs --track-renames ${rclone_filter} ${@:2}`;
    echo $cmd;
    rclone           check  "${local_path}"   "${rclone_remote}:${rclone_path}"  --ignore-size --drive-skip-gdocs --track-renames ${rclone_filter} ${@:2};
}

#
# Scan helpers
#
scan-tiff()
{
    if [ "$1" == "" ]; then
        echo "Please specfy the filename of the tiff file (without extension)"
        return 1
    fi

    scanimage --format tiff -p --mode Gray --resolution 300 > $1.tiff
}

scan-tiff2pdf()
{
    if [ "$3" == "" ]; then
        echo "Usage: $0 lang output.pdf file-01.tiff file-02.tiff... (lang: spa, cat, eng..)"
        return 1
    fi

    lang=$1
    outfile=$2

    echo "lang    =" $lang
    echo "outfile =" $outfile
    shift
    shift
    pdfs=()
    for file in $*; do
        echo OCR+PDF on $file...

        basename=`echo "$file" | cut -d'.' -f1`
        extension=`echo "$file" | cut -d'.' -f2`
#         echo filename = $basename
#         echo extension = $extension

        tesseract -psm 1 -l $lang $file $basename pdf

        pdf=$basename.pdf
        echo pdf  = $pdf
        pdfs+=($pdf)
        echo pdfs = ${pdfs[@]}
    done

#     for pdf in ${pdfs[@]}; do
#         echo $pdf
#     done

    echo Generating $outfile from ${pdfs[@]}
    pdftk ${pdfs[@]} cat output $outfile

    acroread $outfile
}

#
# Tmux(inator) helper
#
tmux-slurm()
{
    if [ "$1" == "" ] && [ "$SLURM_SETUP_VER" == "" ]; then
        echo "Please specify the version as argument."
        return 1
    fi

    if [ "$SLURM_SETUP_VER" == "" ] || [ "$1" != "" ]; then
        export SLURM_SETUP_VER=$1
    fi

#     tmuxinator start slurm -n slurm-$SLURM_SETUP_VER $SLURM_SETUP_VER
#     tmux set-environment -t slurm-$SLURM_SETUP_VER SLURM_SETUP_VER $SLURM_SETUP_VER
#     tmux attach -t slurm-$SLURM_SETUP_VER
#     tmux set-environment -t slurm-$SLURM_SETUP_VER SLURM_SETUP_VER $SLURM_SETUP_VER || tmuxinator start slurm -n slurm-$SLURM_SETUP_VER $SLURM_SETUP_VER
    tmuxinator start slurm -n slurm-$SLURM_SETUP_VER $SLURM_SETUP_VER
    tmux set-environment -t slurm-$SLURM_SETUP_VER SLURM_SETUP_VER $SLURM_SETUP_VER
    tmux attach -t slurm-$SLURM_SETUP_VER
}

tmux-slurm-run()
{
    if [ "$1" == "" ] && [ "$SLURM_SETUP_VER" == "" ]; then
        echo "Please specify the version as argument."
        return 1
    fi

    if [ "$SLURM_SETUP_VER" == "" ] || [ "$1" != "" ]; then
        export SLURM_SETUP_VER=$1
    fi

	tmux new-session -t "slurm-$SLURM_SETUP_VER" -s slurm-$SLURM_SETUP_VER-run || tmux attach -t slurm-$SLURM_SETUP_VER-run
}

tmux-slurm-bug()
{
    bug=$1
    export SLURM_BUG_PATH=~/workspace/slurm/bugs/$bug
    mkdir -p $SLURM_BUG_PATH

    tmux new-window -n "$bug" -c $SLURM_SLURM_DIR -a -t "run"
#     tmux swap-window -t -1
    tmux split-window -c $SLURM_SLURM_DIR
    tmux split-window -c $SLURM_SLURM_DIR
    tmux split-window -c $SLURM_SLURM_DIR
    tmux split-window -c $SLURM_SLURM_DIR
#     tmux select-layout "7e02,274x81,0,0{161x81,0,0[161x71,0,0,56,161x9,0,72,79],112x81,162,0[112x18,162,0,77,112x62,162,19,78]}"
#     tmux select-layout "d241,274x76,0,0{161x76,0,0[161x68,0,0,370,161x7,0,69,371],112x76,162,0[112x15,162,0,372,112x30,162,16,373,112x29,162,47,375]}"
    tmux select-layout "bf1f,274x76,0,0{161x76,0,0[161x65,0,0,594,161x10,0,66,595],112x76,162,0[112x11,162,0,596,112x53,162,12,597,112x10,162,66,598]}"
    tmux select-pane -t 1

    # tmux send-keys -t 1 "vim --servername bug-$bug" Enter
    tmux send-keys -t 1 "export SLURM_BUG_PATH=$SLURM_BUG_PATH" Enter
    tmux send-keys -t 1 "vim NEWS" Enter ":OpenSession bug-$bug-$SLURM_SETUP_VER" Tab Enter ":SaveSession bug-$bug-$SLURM_SETUP_VER" Tab Enter

    tmux send-keys -t 2 "export SLURM_BUG_PATH=$SLURM_BUG_PATH" Enter
    tmux send-keys -t 2 "git status -uno" Enter

    tmux send-keys -t 3 "export SLURM_BUG_PATH=$SLURM_BUG_PATH" Enter
    tmux send-keys -t 3 "squeue; echo smap -i2" Enter

    tmux send-keys -t 4 "export SLURM_BUG_PATH=$SLURM_BUG_PATH" Enter
    tmux send-keys -t 4 "sinfo" Enter

    tmux send-keys -t 5 "export SLURM_BUG_PATH=$SLURM_BUG_PATH" Enter
    tmux send-keys -t 5 "cd $SLURM_BUG_PATH" Enter
    tmux send-keys -t 5 "ls -lha" Enter
}

#
# Slurm helpers
#
# ToDo: Use EnvModules?
#
slurm-setup()
{
    if [ "$1" == "" ] && [ "$SLURM_SETUP_VER" == "" ]; then
        echo "Please specify the version as argument."
        return 1
    fi

    if [ "$SLURM_SETUP_VER" == "" ] || [ "$1" != "" ]; then
        export SLURM_SETUP_VER=$1
    fi

    dirname=$HOME/workspace/slurm/$SLURM_SETUP_VER
    # echo $dirname

    export SLURM_LOCAL_DIR=${dirname}/local
    export SLURM_BUILD_DIR=${dirname}/build
    export SLURM_SLURM_DIR=${dirname}/slurm

    export SLURM_LOCAL_GLOBALS_FILE=${SLURM_LOCAL_DIR}/etc/globals.local

    export    PATH=${SLURM_LOCAL_DIR}/bin:$PATH
    export    PATH=${SLURM_LOCAL_DIR}/sbin:$PATH
    export MANPATH=${SLURM_LOCAL_DIR}/share/man:$MANPATH

    mkdir -p ${SLURM_LOCAL_DIR}/lib/security
    mkdir -p ${SLURM_LOCAL_DIR}/var/log
    mkdir -p ${SLURM_LOCAL_DIR}/var/run
    mkdir -p ${SLURM_LOCAL_DIR}/var/spool
    mkdir -p ${SLURM_LOCAL_DIR}/tmp

    if [ ! -L ${SLURM_LOCAL_DIR}/etc ]; then
        ln -s ../etc ${SLURM_LOCAL_DIR}/etc
    fi

    source ${SLURM_SLURM_DIR}/contribs/slurm_completion_help/slurm_completion.sh
}

slurm-dbd()
{
    $SLURM_LOCAL_DIR/sbin/slurmdbd -Dvvv $*
}

slurm-ctld()
{
    $SLURM_LOCAL_DIR/sbin/slurmctld -Dvvv $*
}

slurm-d()
{
    $SLURM_LOCAL_DIR/sbin/slurmd -DvvvN $*
}

slurm-tail-d()
{
    sudo tail -n 300 -f $SLURM_LOCAL_DIR/var/log/slurmd-$1.log
}

if [ "$SLURM_SETUP_VER" != "" ]; then
    slurm-setup
fi

audio-restart()
{
    pulseaudio --kill
    pulseaudio --start
}

gpi-monitor()
{
    autossh imatge.upc.edu -t "ssh root@s1 -t tmux attach -t monitor"
}
gpi-tasks()
{
    autossh imatge.upc.edu -t "tmux attach -t tasks"
}
gpi-calcula()
{
    autossh calcula.tsc.upc.edu -p2225 -t "module load tmux; tmux attach -t calcula"
}
i2cat-ibpm()
{
    autossh ubuntu@ibpm -t "tmux attach -t ibpm"
}
